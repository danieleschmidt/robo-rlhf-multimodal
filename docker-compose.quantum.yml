version: '3.8'

# Quantum SDLC System Production Deployment
# Orchestrates autonomous development lifecycle with monitoring and security

services:
  # Quantum SDLC Core Engine
  quantum-sdlc:
    build:
      context: .
      target: production
      dockerfile: Dockerfile
    container_name: quantum-sdlc-core
    restart: unless-stopped
    environment:
      - ROBO_RLHF_ENVIRONMENT=production
      - ROBO_RLHF_LOG_LEVEL=INFO
      - ROBO_RLHF_SECURE_MODE=1
      - QUANTUM_OPTIMIZATION_ENABLED=true
      - ANALYTICS_CIRCUIT_BREAKERS=true
    volumes:
      - ./configs:/workspace/configs:ro
      - ./data:/workspace/data
      - ./logs:/workspace/logs
      - /var/run/docker.sock:/var/run/docker.sock:ro  # For autonomous deployments
    ports:
      - "8080:8080"  # Quantum SDLC API
      - "9090:9090"  # Metrics endpoint
    networks:
      - quantum-network
    healthcheck:
      test: ["CMD", "python", "-c", "import robo_rlhf.quantum.autonomous; print('OK')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      - redis
      - prometheus
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.quantum-sdlc.rule=Host(`sdlc.terragonlabs.local`)"
      - "traefik.http.services.quantum-sdlc.loadbalancer.server.port=8080"

  # Analytics Engine
  quantum-analytics:
    build:
      context: .
      target: production
      dockerfile: Dockerfile
    container_name: quantum-analytics
    restart: unless-stopped
    command: ["python", "-m", "robo_rlhf.quantum.analytics", "--mode", "server"]
    environment:
      - ROBO_RLHF_ENVIRONMENT=production
      - ANALYTICS_PREDICTION_ENABLED=true
      - CIRCUIT_BREAKER_ENABLED=true
    volumes:
      - ./configs:/workspace/configs:ro
      - ./data/analytics:/workspace/data
      - ./logs:/workspace/logs
    ports:
      - "8081:8080"  # Analytics API
    networks:
      - quantum-network
    depends_on:
      - redis
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and state management
  redis:
    image: redis:7-alpine
    container_name: quantum-redis
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - ./configs/redis.conf:/usr/local/etc/redis/redis.conf:ro
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - quantum-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: quantum-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "9091:9090"
    networks:
      - quantum-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: quantum-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=quantum2024!
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://grafana.terragonlabs.local:3000
      - GF_INSTALL_PLUGINS=redis-datasource,prometheus
    volumes:
      - ./configs/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./configs/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - grafana-data:/var/lib/grafana
    ports:
      - "3000:3000"
    networks:
      - quantum-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Load balancer and reverse proxy
  traefik:
    image: traefik:v3.0
    container_name: quantum-traefik
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=admin@terragonlabs.com"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "8090:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-data:/letsencrypt
    networks:
      - quantum-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.terragonlabs.local`)"
      - "traefik.http.routers.traefik.service=api@internal"

  # Security scanner for containers
  security-scanner:
    image: aquasec/trivy:latest
    container_name: quantum-security
    restart: "no"
    command: ["server", "--listen", "0.0.0.0:4954"]
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - trivy-cache:/root/.cache/trivy
    ports:
      - "4954:4954"
    networks:
      - quantum-network
    profiles:
      - security

  # Log aggregator
  loki:
    image: grafana/loki:latest
    container_name: quantum-loki
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki-data:/tmp/loki
    ports:
      - "3100:3100"
    networks:
      - quantum-network
    profiles:
      - logging

  # Log shipper
  promtail:
    image: grafana/promtail:latest
    container_name: quantum-promtail
    restart: unless-stopped
    volumes:
      - ./logs:/var/log/quantum:ro
      - /var/log:/var/log/host:ro
      - ./configs/promtail-config.yml:/etc/promtail/config.yml:ro
    networks:
      - quantum-network
    depends_on:
      - loki
    profiles:
      - logging

networks:
  quantum-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  traefik-data:
    driver: local
  trivy-cache:
    driver: local
  loki-data:
    driver: local

# Health check configuration
x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 60s