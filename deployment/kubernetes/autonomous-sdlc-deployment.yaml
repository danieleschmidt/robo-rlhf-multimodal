# Kubernetes Deployment for Autonomous SDLC System
# Production-ready deployment with scaling, monitoring, and security

apiVersion: v1
kind: Namespace
metadata:
  name: robo-rlhf
  labels:
    name: robo-rlhf
    environment: production

---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: autonomous-sdlc-config
  namespace: robo-rlhf
data:
  autonomous_config.yaml: |
    environment: production
    debug: false
    
    autonomous:
      max_parallel: 4
      quality_threshold: 0.85
      optimization_frequency: 5
      auto_rollback: true
    
    security:
      enable_input_validation: true
      max_commands_per_minute: 50
      max_command_timeout: 1800
    
    optimization:
      enable_caching: true
      cache_size: 2000
      cache_ttl: 7200
      enable_parallel: true
      auto_scale: true
      max_workers: 8
    
    monitoring:
      enable_metrics: true
      metrics_port: 8080
      api_port: 8081
      log_level: INFO

---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: autonomous-sdlc-secrets
  namespace: robo-rlhf
type: Opaque
stringData:
  postgres-password: "sdlc_secure_password_2025"
  redis-password: "redis_secure_password_2025"
  grafana-admin-password: "grafana_admin_password_2025"

---
# Persistent Volume Claims
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-data-pvc
  namespace: robo-rlhf
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: autonomous-logs-pvc
  namespace: robo-rlhf
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
  storageClassName: shared-storage

---
# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: robo-rlhf
  labels:
    app: postgres
    component: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
        component: database
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        env:
        - name: POSTGRES_DB
          value: "autonomous_sdlc"
        - name: POSTGRES_USER
          value: "sdlc_user"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: autonomous-sdlc-secrets
              key: postgres-password
        ports:
        - containerPort: 5432
          name: postgres
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1"
        livenessProbe:
          exec:
            command:
              - pg_isready
              - -U
              - sdlc_user
              - -d
              - autonomous_sdlc
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
              - pg_isready
              - -U
              - sdlc_user
              - -d
              - autonomous_sdlc
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-data-pvc

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: robo-rlhf
  labels:
    app: postgres
spec:
  ports:
  - port: 5432
    targetPort: 5432
    name: postgres
  selector:
    app: postgres

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: robo-rlhf
  labels:
    app: redis
    component: cache
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
        component: cache
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        command:
          - redis-server
          - --requirepass
          - $(REDIS_PASSWORD)
          - --appendonly
          - "yes"
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: autonomous-sdlc-secrets
              key: redis-password
        ports:
        - containerPort: 6379
          name: redis
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
              - redis-cli
              - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
              - redis-cli
              - ping
          initialDelaySeconds: 5
          periodSeconds: 5

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: robo-rlhf
  labels:
    app: redis
spec:
  ports:
  - port: 6379
    targetPort: 6379
    name: redis
  selector:
    app: redis

---
# Autonomous SDLC Executor Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: autonomous-sdlc-executor
  namespace: robo-rlhf
  labels:
    app: autonomous-sdlc-executor
    component: executor
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: autonomous-sdlc-executor
  template:
    metadata:
      labels:
        app: autonomous-sdlc-executor
        component: executor
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: autonomous-sdlc-sa
      containers:
      - name: autonomous-executor
        image: robo-rlhf/autonomous-sdlc:latest
        imagePullPolicy: Always
        env:
        - name: ROBO_RLHF_ENV
          value: "production"
        - name: ROBO_RLHF_LOG_LEVEL
          value: "INFO"
        - name: POSTGRES_HOST
          value: "postgres"
        - name: POSTGRES_DB
          value: "autonomous_sdlc"
        - name: POSTGRES_USER
          value: "sdlc_user"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: autonomous-sdlc-secrets
              key: postgres-password
        - name: REDIS_HOST
          value: "redis"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: autonomous-sdlc-secrets
              key: redis-password
        ports:
        - containerPort: 8080
          name: health
        - containerPort: 8081
          name: api
        volumeMounts:
        - name: config
          mountPath: /app/config
        - name: logs
          mountPath: /app/logs
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 2
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
      volumes:
      - name: config
        configMap:
          name: autonomous-sdlc-config
      - name: logs
        persistentVolumeClaim:
          claimName: autonomous-logs-pvc
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "autonomous-sdlc"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"

---
# Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: autonomous-sdlc-sa
  namespace: robo-rlhf
  labels:
    app: autonomous-sdlc

---
# Role for autonomous SDLC operations
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: autonomous-sdlc-role
  namespace: robo-rlhf
rules:
- apiGroups: [""]
  resources: ["pods", "services", "configmaps"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch", "patch", "update"]

---
# Role Binding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: autonomous-sdlc-binding
  namespace: robo-rlhf
subjects:
- kind: ServiceAccount
  name: autonomous-sdlc-sa
  namespace: robo-rlhf
roleRef:
  kind: Role
  name: autonomous-sdlc-role
  apiGroup: rbac.authorization.k8s.io

---
# Service for Autonomous SDLC Executor
apiVersion: v1
kind: Service
metadata:
  name: autonomous-sdlc-executor
  namespace: robo-rlhf
  labels:
    app: autonomous-sdlc-executor
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
    name: health
  - port: 8081
    targetPort: 8081
    name: api
  selector:
    app: autonomous-sdlc-executor

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: autonomous-sdlc-hpa
  namespace: robo-rlhf
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: autonomous-sdlc-executor
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

---
# Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: autonomous-sdlc-ingress
  namespace: robo-rlhf
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/limit-rps: "10"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - autonomous-sdlc.your-domain.com
    secretName: autonomous-sdlc-tls
  rules:
  - host: autonomous-sdlc.your-domain.com
    http:
      paths:
      - path: /health
        pathType: Exact
        backend:
          service:
            name: autonomous-sdlc-executor
            port:
              number: 8080
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: autonomous-sdlc-executor
            port:
              number: 8081

---
# Network Policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: autonomous-sdlc-network-policy
  namespace: robo-rlhf
spec:
  podSelector:
    matchLabels:
      app: autonomous-sdlc-executor
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 8081
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 443