# Release Workflow
# Automated release creation with semantic versioning, changelog generation, and asset publishing

name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.2.3)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: "3.10"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ============================================================================
  # Validate Release Prerequisites
  # ============================================================================
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Determine version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
          IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
        else
          VERSION="${{ github.ref_name }}"
          if [[ "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            IS_PRERELEASE="false"
          else
            IS_PRERELEASE="true"
          fi
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "is-prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
        
        echo "Release version: $VERSION"
        echo "Is pre-release: $IS_PRERELEASE"
        
    - name: Validate version format
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\.[0-9]+)?)?$ ]]; then
          echo "‚ùå Invalid version format: $VERSION"
          echo "Expected format: v1.2.3 or v1.2.3-alpha.1"
          exit 1
        fi
        echo "‚úÖ Valid version format: $VERSION"
        
    - name: Check if tag already exists
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if git tag -l | grep -q "^$VERSION$"; then
          echo "‚ùå Tag $VERSION already exists"
          exit 1
        fi
        echo "‚úÖ Tag $VERSION is available"
        
    - name: Validate changelog entry
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        VERSION_NO_V="${VERSION#v}"
        
        if [[ ! -f "CHANGELOG.md" ]]; then
          echo "‚ö†Ô∏è No CHANGELOG.md found"
          exit 0
        fi
        
        if ! grep -q "## \[$VERSION_NO_V\]" CHANGELOG.md; then
          echo "‚ö†Ô∏è No changelog entry found for $VERSION_NO_V"
          echo "Please add a changelog entry before releasing"
        else
          echo "‚úÖ Changelog entry found for $VERSION_NO_V"
        fi

  # ============================================================================
  # Run Pre-Release Tests
  # ============================================================================
  pre-release-tests:
    name: Pre-Release Tests
    runs-on: ubuntu-latest
    needs: [validate]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        
    - name: Run comprehensive test suite
      run: |
        echo "üß™ Running comprehensive test suite for release..."
        
        # Unit tests with coverage
        pytest tests/unit/ \
          --cov=robo_rlhf \
          --cov-report=xml \
          --cov-report=term-missing \
          --junit-xml=unit-results.xml \
          -v
          
        # Integration tests
        pytest tests/integration/ \
          --junit-xml=integration-results.xml \
          -v
          
        # Performance benchmarks
        pytest tests/performance/ \
          --benchmark-only \
          --benchmark-json=benchmark-results.json \
          -v
          
    - name: Verify code quality
      run: |
        echo "üîç Running code quality checks..."
        
        # Linting
        flake8 robo_rlhf tests --count --statistics
        mypy robo_rlhf
        
        # Formatting
        black --check robo_rlhf tests
        isort --check-only robo_rlhf tests
        
        # Security
        bandit -r robo_rlhf
        safety check
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: pre-release-test-results
        path: |
          unit-results.xml
          integration-results.xml
          benchmark-results.json
          coverage.xml

  # ============================================================================
  # Build Release Assets
  # ============================================================================
  build-assets:
    name: Build Release Assets
    runs-on: ubuntu-latest
    needs: [validate, pre-release-tests]
    
    outputs:
      wheel-name: ${{ steps.build.outputs.wheel-name }}
      sdist-name: ${{ steps.build.outputs.sdist-name }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Update version in pyproject.toml
      run: |
        VERSION="${{ needs.validate.outputs.version }}"
        VERSION_NO_V="${VERSION#v}"
        
        # Update version in pyproject.toml
        sed -i "s/version = \".*\"/version = \"$VERSION_NO_V\"/" pyproject.toml
        
        echo "Updated version to $VERSION_NO_V"
        grep "version =" pyproject.toml
        
    - name: Build package
      id: build
      run: |
        python -m build
        
        # Get the built filenames
        WHEEL_NAME=$(ls dist/*.whl | head -1 | xargs basename)
        SDIST_NAME=$(ls dist/*.tar.gz | head -1 | xargs basename)
        
        echo "wheel-name=$WHEEL_NAME" >> $GITHUB_OUTPUT
        echo "sdist-name=$SDIST_NAME" >> $GITHUB_OUTPUT
        
        echo "Built wheel: $WHEEL_NAME"
        echo "Built sdist: $SDIST_NAME"
        
    - name: Verify package
      run: |
        twine check dist/*
        
        # Test installation
        pip install dist/*.whl
        python -c "import robo_rlhf; print(robo_rlhf.__version__)"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-packages
        path: dist/

  # ============================================================================
  # Build and Push Container Images
  # ============================================================================
  build-images:
    name: Build Release Images
    runs-on: ubuntu-latest
    needs: [validate, pre-release-tests]
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}},value=${{ needs.validate.outputs.version }}
          type=semver,pattern={{major}}.{{minor}},value=${{ needs.validate.outputs.version }}
          type=semver,pattern={{major}},value=${{ needs.validate.outputs.version }}
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push production image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        target: production
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push GPU image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        target: gpu-production
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:gpu-${{ needs.validate.outputs.version }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:gpu-latest
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ============================================================================
  # Generate Release Notes
  # ============================================================================
  generate-notes:
    name: Generate Release Notes
    runs-on: ubuntu-latest
    needs: [validate]
    
    outputs:
      release-notes: ${{ steps.notes.outputs.release-notes }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Generate release notes
      id: notes
      run: |
        VERSION="${{ needs.validate.outputs.version }}"
        VERSION_NO_V="${VERSION#v}"
        
        # Try to extract from CHANGELOG.md first
        if [[ -f "CHANGELOG.md" ]] && grep -q "## \[$VERSION_NO_V\]" CHANGELOG.md; then
          echo "üìù Extracting release notes from CHANGELOG.md"
          
          # Extract section between version headers
          awk "/## \[$VERSION_NO_V\]/{flag=1; next} /## \[/{flag=0} flag" CHANGELOG.md > release_notes.md
        else
          echo "üìù Generating release notes from git commits"
          
          # Get previous tag
          PREV_TAG=$(git tag --sort=-version:refname | grep -v "$VERSION" | head -1)
          
          if [[ -n "$PREV_TAG" ]]; then
            echo "## What's Changed" > release_notes.md
            echo "" >> release_notes.md
            
            # Generate commit list
            git log --oneline --no-merges "${PREV_TAG}..HEAD" | while read commit; do
              echo "* $commit" >> release_notes.md
            done
          else
            echo "## Initial Release" > release_notes.md
            echo "" >> release_notes.md
            echo "This is the first release of robo-rlhf-multimodal." >> release_notes.md
          fi
        fi
        
        # Add asset information
        echo "" >> release_notes.md
        echo "## Assets" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Python Package" >> release_notes.md
        echo "- \`robo-rlhf-multimodal-${VERSION_NO_V}-py3-none-any.whl\` - Python wheel package" >> release_notes.md
        echo "- \`robo-rlhf-multimodal-${VERSION_NO_V}.tar.gz\` - Source distribution" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Container Images" >> release_notes.md
        echo "- \`ghcr.io/${{ github.repository }}:${VERSION}\` - Production image" >> release_notes.md
        echo "- \`ghcr.io/${{ github.repository }}:gpu-${VERSION}\` - GPU-enabled image" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Installation" >> release_notes.md
        echo "\`\`\`bash" >> release_notes.md
        echo "pip install robo-rlhf-multimodal==${VERSION_NO_V}" >> release_notes.md
        echo "\`\`\`" >> release_notes.md
        
        # Store as output
        {
          echo 'release-notes<<EOF'
          cat release_notes.md
          echo EOF
        } >> $GITHUB_OUTPUT
        
    - name: Upload release notes
      uses: actions/upload-artifact@v3
      with:
        name: release-notes
        path: release_notes.md

  # ============================================================================
  # Create GitHub Release
  # ============================================================================
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, build-assets, build-images, generate-notes]
    
    outputs:
      release-id: ${{ steps.release.outputs.id }}
      release-url: ${{ steps.release.outputs.html_url }}
      
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-packages
        path: dist/
        
    - name: Create release
      id: release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.validate.outputs.version }}
        release_name: Release ${{ needs.validate.outputs.version }}
        body: ${{ needs.generate-notes.outputs.release-notes }}
        draft: false
        prerelease: ${{ needs.validate.outputs.is-prerelease }}
        
    - name: Upload wheel asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.release.outputs.upload_url }}
        asset_path: dist/${{ needs.build-assets.outputs.wheel-name }}
        asset_name: ${{ needs.build-assets.outputs.wheel-name }}
        asset_content_type: application/zip
        
    - name: Upload source distribution asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.release.outputs.upload_url }}
        asset_path: dist/${{ needs.build-assets.outputs.sdist-name }}
        asset_name: ${{ needs.build-assets.outputs.sdist-name }}
        asset_content_type: application/gzip

  # ============================================================================
  # Publish to PyPI
  # ============================================================================
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [validate, create-release]
    if: needs.validate.outputs.is-prerelease == 'false'
    environment:
      name: pypi
      url: https://pypi.org/project/robo-rlhf-multimodal/
      
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-packages
        path: dist/
        
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true

  # ============================================================================
  # Post-Release Actions
  # ============================================================================
  post-release:
    name: Post-Release Actions
    runs-on: ubuntu-latest
    needs: [validate, create-release, publish-pypi]
    if: always() && needs.create-release.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create post-release PR
      if: needs.validate.outputs.is-prerelease == 'false'
      uses: actions/github-script@v7
      with:
        script: |
          const version = '${{ needs.validate.outputs.version }}';
          const nextVersion = version.replace(/v(\d+)\.(\d+)\.(\d+)/, (match, major, minor, patch) => {
            return `v${major}.${parseInt(minor) + 1}.0-dev`;
          });
          
          const title = `chore: bump version to ${nextVersion}`;
          const body = `
          ## Post-Release Version Bump
          
          Automatically generated PR to bump version after release ${version}.
          
          ### Changes:
          - Update version in \`pyproject.toml\` to ${nextVersion}
          - Add new section in \`CHANGELOG.md\` for next release
          
          This PR should be merged to prepare for the next development cycle.
          `;
          
          // Note: This would require creating a branch and PR
          console.log('Would create PR:', { title, body });
          
    - name: Post release notification
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            "text": "üéâ New release published!",
            "attachments": [{
              "color": "good",
              "fields": [{
                "title": "Version",
                "value": "${{ needs.validate.outputs.version }}",
                "short": true
              }, {
                "title": "Type",
                "value": "${{ needs.validate.outputs.is-prerelease == 'true' && 'Pre-release' || 'Release' }}",
                "short": true
              }, {
                "title": "PyPI",
                "value": "${{ needs.publish-pypi.result == 'success' && 'Published' || 'Skipped' }}",
                "short": true
              }, {
                "title": "GitHub Release",
                "value": "${{ needs.create-release.outputs.release-url }}",
                "short": false
              }]
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ============================================================================
  # Rollback on Failure
  # ============================================================================
  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [validate, create-release]
    if: failure() && needs.create-release.result == 'success'
    
    steps:
    - name: Delete failed release
      uses: actions/github-script@v7
      with:
        script: |
          const releaseId = '${{ needs.create-release.outputs.release-id }}';
          const version = '${{ needs.validate.outputs.version }}';
          
          try {
            // Delete the release
            await github.rest.repos.deleteRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseId
            });
            
            // Delete the tag
            await github.rest.git.deleteRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `tags/${version}`
            });
            
            console.log(`Cleaned up failed release ${version}`);
          } catch (error) {
            console.error('Failed to cleanup release:', error);
          }
          
    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            "text": "‚ö†Ô∏è Release failed and was rolled back",
            "attachments": [{
              "color": "warning",
              "fields": [{
                "title": "Version",
                "value": "${{ needs.validate.outputs.version }}",
                "short": true
              }, {
                "title": "Action",
                "value": "Release deleted, tag removed",
                "short": true
              }, {
                "title": "Workflow",
                "value": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                "short": false
              }]
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}