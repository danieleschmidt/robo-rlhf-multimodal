# Continuous Integration Workflow
# This workflow runs tests, quality checks, and security scans on PRs and pushes

name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.10"

# Cancel previous runs if new push
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ============================================================================
  # Code Quality and Security Checks
  # ============================================================================
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        
    - name: Run linting
      run: |
        echo "::group::Flake8"
        flake8 robo_rlhf tests --count --statistics
        echo "::endgroup::"
        
        echo "::group::MyPy"
        mypy robo_rlhf
        echo "::endgroup::"
        
    - name: Check code formatting
      run: |
        echo "::group::Black"
        black --check --diff robo_rlhf tests
        echo "::endgroup::"
        
        echo "::group::isort"
        isort --check-only --diff robo_rlhf tests
        echo "::endgroup::"
        
    - name: Security scan
      run: |
        echo "::group::Bandit"
        bandit -r robo_rlhf -f json -o bandit-report.json || true
        echo "::endgroup::"
        
        echo "::group::Safety"
        safety check --json --output safety-report.json || true
        echo "::endgroup::"
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          
  # ============================================================================
  # Unit Tests
  # ============================================================================
  test:
    name: Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgl1-mesa-dev \
          libglib2.0-0 \
          libgtk-3-0 \
          libsm6 \
          libxext6 \
          libxrender-dev
          
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        
    - name: Run unit tests
      run: |
        pytest tests/unit/ \
          --cov=robo_rlhf \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --junit-xml=junit-results.xml \
          -v
          
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == env.PYTHON_VERSION
      with:
        file: ./coverage.xml
        flags: unit-tests
        name: codecov-umbrella
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          junit-results.xml
          htmlcov/
          
  # ============================================================================
  # Integration Tests
  # ============================================================================
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [quality, test]
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
          
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        
    - name: Wait for services
      run: |
        timeout 30 bash -c 'until nc -z localhost 27017; do sleep 1; done'
        timeout 30 bash -c 'until nc -z localhost 6379; do sleep 1; done'
        
    - name: Run integration tests
      env:
        DATABASE_URL: mongodb://admin:password@localhost:27017/robo_rlhf_test?authSource=admin
        REDIS_URL: redis://localhost:6379/0
        TESTING: "1"
      run: |
        pytest tests/integration/ \
          --cov=robo_rlhf \
          --cov-append \
          --cov-report=xml \
          --junit-xml=integration-results.xml \
          -v
          
    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: |
          integration-results.xml
          
  # ============================================================================
  # Performance Tests
  # ============================================================================
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        
    - name: Run performance benchmarks
      run: |
        pytest tests/performance/ \
          --benchmark-only \
          --benchmark-json=benchmark-results.json \
          -v
          
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: benchmark-results
        path: benchmark-results.json
        
  # ============================================================================
  # Build Package
  # ============================================================================
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [quality, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Build package
      run: python -m build
      
    - name: Check package
      run: twine check dist/*
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: package-dist
        path: dist/
        
  # ============================================================================
  # Docker Build Test
  # ============================================================================
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build development image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: development
        push: false
        tags: robo-rlhf:dev-test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build production image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        push: false
        tags: robo-rlhf:prod-test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test production image
      run: |
        docker run --rm robo-rlhf:prod-test python -c "import robo_rlhf; print(robo_rlhf.__version__)"
        
  # ============================================================================
  # Report Status
  # ============================================================================
  ci-status:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [quality, test, integration-test, performance-test, build, docker-build]
    if: always()
    
    steps:
    - name: Check all jobs
      run: |
        echo "Quality: ${{ needs.quality.result }}"
        echo "Tests: ${{ needs.test.result }}"
        echo "Integration Tests: ${{ needs.integration-test.result }}"
        echo "Performance Tests: ${{ needs.performance-test.result }}"
        echo "Build: ${{ needs.build.result }}"
        echo "Docker Build: ${{ needs.docker-build.result }}"
        
        if [[ "${{ needs.quality.result }}" == "failure" || \
              "${{ needs.test.result }}" == "failure" || \
              "${{ needs.integration-test.result }}" == "failure" || \
              "${{ needs.build.result }}" == "failure" || \
              "${{ needs.docker-build.result }}" == "failure" ]]; then
          echo "❌ CI Failed"
          exit 1
        else
          echo "✅ CI Passed"
        fi
        
    - name: Post to Slack on failure
      if: failure() && github.ref == 'refs/heads/main'
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: |
          🚨 CI failed on main branch
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
          Message: ${{ github.event.head_commit.message }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}